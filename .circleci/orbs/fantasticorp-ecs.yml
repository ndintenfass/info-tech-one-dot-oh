version: 2.1
executors:
  dev:
    parameters:
      tag:
        type: string
        default: "latest"
    docker:
      - image: gerey/saasdemo-docker-image:<< parameters.tag >>
    working_directory: ~/ecs-tools-working

commands:
  deploy-to-target:
    parameters:
      target:
        type: enum
        enum: ["prod", "staging"]
        default: prod
      image_tag:
        type: string
        default: ${CIRCLE_SHA1}
    steps:
      - run:
          name: "Run deploy script on the target: << parameters.target >>"
          command: |
            # more bash-friendly output for jq
            _jq() {
                jq --raw-output --exit-status "$@"
            }

            # args: $tag
            # stdout: task def json
            task_definition() {
                tag="$1"
                cat \<<EOF
            [
                {
                    "name": "uwsgi",
                    "image": "chriscircleci/info-tech-one-dot-oh-uwsgi:$tag",
                    "essential": true,
                    "memory": 200,
                    "cpu": 10
                },
                {
                    "name": "nginx",
                    "links": [
                        "uwsgi"
                    ],
                    "image": "chriscircleci/info-tech-one-dot-oh-nginx:$tag",
                    "portMappings": [
                        {
                            "containerPort": 8000
                        }
                    ],
                    "cpu": 10,
                    "memory": 200,
                    "essential": true
                }
            ]
            EOF
            }

            # args: $family $task_def
            # stdout: task definition revision ARN
            register_definition() {
                family="$1"
                task_def="$2"
                if revision="$(aws ecs register-task-definition --container-definitions "$task_def" --family "$family" | _jq '.taskDefinition.taskDefinitionArn')"; then
                    echo "Created task def revision: $revision" 1>&2
                else
                    echo "Failed to register task definition" 1>&2
                    return 1
                fi
                echo "$revision"
            }

            # args: $service
            deploy() {
                service="chris_demo_service"
                family="info-tech-one-dot-oh"
                cluster="fantasticorp-cluster"
                tag="<< parameters.image_tag >>"
                task_def="$(task_definition "$tag")"
                revision="$(register_definition "$family" "$task_def")"
                if [[ $(aws ecs update-service --cluster "$cluster" --service "$service" --task-definition "$revision" | _jq '.service.taskDefinition') != $revision ]]; then
                    echo "Error updating service." 1>&2
                    return 1
                fi
            }

            case "<< parameters.target >>" in
                staging) deploy "info-tech-one-dot-oh-staging" ;;
                prod) deploy "info-tech-one-dot-oh" ;;
            esac
  get-code-and-setup-docker:
    steps:
      - checkout
      - setup_remote_docker:
          reusable: true
jobs:
  build:
    parameters:
      image_tag:
        type: string
        default: ${CIRCLE_SHA1}
    executor: dev
    environment:
      IMAGE_TAG: << parameters.image_tag >>

    steps:
      - get-code-and-setup-docker
      - run: docker build -t $DOCKER_USER/info-tech-one-dot-oh-uwsgi:<< parameters.image_tag >> uwsgi
      - run: docker build -t $DOCKER_USER/info-tech-one-dot-oh-nginx:<< parameters.image_tag >> nginx
      #push docker iamge to docker hub
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: docker push $DOCKER_USER/info-tech-one-dot-oh-uwsgi:<< parameters.image_tag >>
      - run: docker push $DOCKER_USER/info-tech-one-dot-oh-nginx:<< parameters.image_tag >>
  test:
    executor: dev

    steps:
      - get-code-and-setup-docker
      - run: docker pull $DOCKER_USER/info-tech-one-dot-oh-uwsgi:${CIRCLE_SHA1}
      - run: docker pull $DOCKER_USER/info-tech-one-dot-oh-nginx:${CIRCLE_SHA1}
      - run: docker build -t info-tech-one-dot-oh-test test
      - run: xxd -l 8 -p /dev/urandom > test_container_name
      - run: docker-compose -p ${CIRCLE_BUILD_NUM} up -d
      - run: docker run --link ${CIRCLE_BUILD_NUM}_nginx_1:nginx --name $(cat test_container_name) info-tech-one-dot-oh-test

      - run:
          when: always
          command: |
            mkdir test-reports
            docker cp $(cat test_container_name):/nosetests.xml test-reports/.
            docker-compose kill || true
      - store_artifacts:
            path: test-reports
      - store_test_results:
          path: test-reports/
  deploy:
    executor: dev

    steps:
      - checkout
      - deploy-to-target:
          target: prod